name: 构建 gup

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:   # 允许手动触发

jobs:
  build:
    name: 构建
    runs-on: ubuntu-latest

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 删除旧版本
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const releases = await github.rest.repos.listReleases({
              owner,
              repo
            });
            
            for (const release of releases.data) {
              await github.rest.repos.deleteRelease({
                owner,
                repo,
                release_id: release.id
              });
              
              if (release.tag_name) {
                try {
                  await github.rest.git.deleteRef({
                    owner,
                    repo,
                    ref: `tags/${release.tag_name}`
                  });
                } catch (e) {
                  console.log(`Failed to delete tag ${release.tag_name}: ${e}`);
                }
              }
            }

      - name: 设置 Go 环境
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.0'

      - name: 初始化 Go 模块
        run: |
          go mod init gup
          go mod tidy

      - name: 构建所有平台
        run: |
          # 创建构建目录和存储目录
          mkdir -p build
          mkdir -p binaries

          # 安装 UPX
          sudo apt-get update
          sudo apt-get install -y upx

          # 构建并压缩函数
          build_and_compress() {
            local OS=$1
            local ARCH=$2
            local SUFFIX=$3
            local NAME="gup${SUFFIX}"
            
            env GOOS=$OS GOARCH=$ARCH go build -ldflags="-s -w" -o "$NAME" gup.go
            upx --best "$NAME" || true
            tar -czf "build/gup_${OS}_${ARCH}.tar.gz" "$NAME"
            cp "$NAME" "binaries/gup_${OS}_${ARCH}${SUFFIX}"
            rm "$NAME"
          }

          # Linux
          build_and_compress linux amd64
          build_and_compress linux 386
          build_and_compress linux arm64
          build_and_compress linux arm

          # Windows
          build_and_compress windows amd64 .exe
          build_and_compress windows 386 .exe

          # macOS
          build_and_compress darwin amd64
          build_and_compress darwin arm64

      - name: 生成 SHA256 校验和
        run: |
          cd build
          sha256sum * > sha256sum.txt

      - name: 提交并推送更改
        if: success()
        run: |
          if [ -d "binaries" ]; then
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
            git pull origin main --no-rebase || git pull origin master --no-rebase
            git add binaries/
            current_time=$(date '+%Y/%m/%d %H:%M:%S')
            if ! git diff --staged --quiet; then
              git commit -m "更新二进制文件 ${current_time}"
              git push
            fi
          fi

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: gup-构建产物
          path: build/*

      - name: 创建发布版本
        uses: softprops/action-gh-release@v2
        if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/')
        with:
          tag_name: ${{ github.ref_name || format('v{0}', github.run_number) }}
          name: GitHub 文件上传工具 ${{ github.ref_name || format('v{0}', github.run_number) }}
          draft: false
          prerelease: false
          files: |
            build/*.tar.gz
            build/sha256sum.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}