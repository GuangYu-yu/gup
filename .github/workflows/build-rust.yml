name: 构建 GitHub 上传工具
on:  
  workflow_dispatch:   # 允许手动触发

jobs:  
  build:  
    name: 构建  
    runs-on: ubuntu-latest  

    steps:  
      - name: 检出代码  
        uses: actions/checkout@v4  

      - name: 删除旧版本
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const releases = await github.rest.repos.listReleases({
              owner,
              repo
            });
            
            for (const release of releases.data) {
              await github.rest.repos.deleteRelease({
                owner,
                repo,
                release_id: release.id
              });
              
              if (release.tag_name) {
                try {
                  await github.rest.git.deleteRef({
                    owner,
                    repo,
                    ref: `tags/${release.tag_name}`
                  });
                } catch (e) {
                  console.log(`Failed to delete tag ${release.tag_name}: ${e}`);
                }
              }
            }

      - name: 设置 Rust 环境
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: x86_64-unknown-linux-gnu

      - name: 添加构建目标
        run: |
          rustup target add x86_64-pc-windows-gnu
          rustup target add i686-pc-windows-gnu
          rustup target add x86_64-apple-darwin
          rustup target add aarch64-apple-darwin
          rustup target add aarch64-unknown-linux-gnu
          rustup target add i686-unknown-linux-gnu
          rustup target add armv7-unknown-linux-gnueabihf

      - name: 安装依赖
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-mingw-w64 upx

      - name: 构建所有平台
        run: |
          # 创建构建目录和存储目录
          mkdir -p build
          mkdir -p binaries
          cd gup

          # 构建并压缩函数
          build_and_compress() {
            local TARGET=$1
            local OS=$2
            local ARCH=$3
            local SUFFIX=$4
            local NAME="gup${SUFFIX}"
            
            echo "构建 $TARGET..."
            cargo build --release --target $TARGET
            
            cp "target/$TARGET/release/gup${SUFFIX}" "../$NAME"
            cd ..
            
            upx --best "$NAME" || true
            tar -czf "build/gup_${OS}_${ARCH}.tar.gz" "$NAME"
            cp "$NAME" "binaries/gup_${OS}_${ARCH}${SUFFIX}"
            rm "$NAME"
            cd github_uploader
          }

          # Linux
          build_and_compress x86_64-unknown-linux-gnu linux amd64 ""
          build_and_compress i686-unknown-linux-gnu linux 386 ""
          build_and_compress aarch64-unknown-linux-gnu linux arm64 ""
          build_and_compress armv7-unknown-linux-gnueabihf linux arm ""
          
          # Windows
          build_and_compress x86_64-pc-windows-gnu windows amd64 ".exe"
          build_and_compress i686-pc-windows-gnu windows 386 ".exe"

          # macOS (交叉编译可能需要特殊设置)
          if [ "$(uname)" == "Darwin" ]; then
            build_and_compress x86_64-apple-darwin darwin amd64 ""
            build_and_compress aarch64-apple-darwin darwin arm64 ""
          fi
          
          cd ..

      - name: 生成 SHA256 校验和
        run: |
          cd build
          sha256sum * > sha256sum.txt

      - name: 提交并推送更改
        if: success()
        run: |
          if [ -d "binaries" ]; then
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
            git pull origin main --no-rebase || git pull origin master --no-rebase
            git add binaries/
            current_time=$(date '+%Y/%m/%d %H:%M:%S')
            if ! git diff --staged --quiet; then
              git commit -m "更新二进制文件 ${current_time}"
              git push
            fi
          fi

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: gup-构建产物
          path: build/*

      - name: 创建发布版本
        uses: softprops/action-gh-release@v2
        if: github.event_name == 'workflow_dispatch'
        with:
          tag_name: v${{ github.run_number }}
          name: GitHub 文件上传工具 v${{ github.run_number }}
          draft: false
          prerelease: false
          files: |
            build/*.tar.gz
            build/sha256sum.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}